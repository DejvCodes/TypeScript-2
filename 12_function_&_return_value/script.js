/*
Funkce - hlub≈°√≠ pohled na n√°vratovou hodnotu
‚Ä¢ ka≈æd√° funkce m≈Ø≈æe vracet nƒõjak√Ω v√Ωsledek pomoc√≠ return
‚Ä¢ v TypeScriptu m≈Ø≈æeme urƒçit, jak√©ho typu ten v√Ωsledek m√° b√Ωt
*/
// 1. Funkce s n√°vratov√Ωm typem "number"
var square = function (num) {
    return num * num;
};
console.log(square(5)); // 25
// 2.Funkce s n√°vratov√Ωm typem "string"
var greet = function (name) {
    return "Ahoj, ".concat(name, "!");
};
console.log(greet('Dejv')); // Ahoj, Dejv!
// 3. Funkce bez n√°vratu (void)
var logMessage = function (message) {
    console.log(message); // Zpr√°va
};
logMessage('Zpr√°va');
// 4. Funkce - Infinity -> n√°vratov√Ω typ "number"
var division = function (num1, num2) {
    return num1 / num2;
};
console.log(division(10, 5)); // 2
// console.log(division(10, 0)); // Infinity 
// console.log(typeof(Infinity));  // number
console.log('----------------------');
// 4Ô∏è‚É£ Funkce, kter√° nikdy neskonƒç√≠ (never)
function throwError(msg) {
    throw new Error(msg);
}
// throwError("Nƒõco se pokazilo!"); // üí• vyhod√≠ chybu
// 5Ô∏è‚É£ Automatick√© odvozen√≠ n√°vratov√©ho typu (type inference)
function multiply(a, b) {
    return a * b; // TS automaticky pozn√°, ≈æe vrac√≠ "number"
}
var result = multiply(4, 2); // ‚úÖ number
// 6Ô∏è‚É£ Funkce vracej√≠c√≠ v√≠ce mo≈ænost√≠ (union type)
function getStatus(success) {
    return success ? "OK" : 500;
}
var status = getStatus(true); // ‚úÖ "OK" nebo 500
// 7Ô∏è‚É£ Funkce vracej√≠c√≠ objekt (ruƒçnƒõ typovan√Ω)
function createUser(name, age) {
    return { name: name, age: age };
}
var user1 = createUser("David", 23);
function makeUser(name, age) {
    return { name: name, age: age };
}
var user2 = makeUser("Petr", 30);
// 9Ô∏è‚É£ Funkce s v√Ωchoz√≠ hodnotou parametru
function greetUser(name) {
    if (name === void 0) { name = "n√°v≈°tƒõvn√≠ku"; }
    return "Ahoj, ".concat(name, "!");
}
console.log(greetUser()); // "Ahoj, n√°v≈°tƒõvn√≠ku!"
console.log(greetUser("Dejv")); // "Ahoj, Dejv!"
// üîü Funkce s voliteln√Ωm parametrem (?)
function sayHello(name) {
    return name ? "Ahoj, ".concat(name, "!") : "Ahoj!";
}
console.log(sayHello()); // "Ahoj!"
console.log(sayHello("David")); // "Ahoj, David!"
